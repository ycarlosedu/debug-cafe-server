// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id        String   @id @default(cuid())
  cep       String
  city      String
  street    String
  number    String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  order     Order[]
}

enum USER_TYPE {
  CLIENT
  STAFF
  MANAGER
  DELIVERY
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  fullName   String
  phone      String
  password   String
  userType   USER_TYPE    @default(CLIENT)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  address    Address?
  creditCard CreditCard[]
  order      Order[]
}

model ProductCategory {
  id        String                 @id @default(cuid())
  name      String
  image     String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  products  CategoriesOnProducts[]
}

model Product {
  id              String                 @id @default(cuid())
  name            String
  price           Float
  description     String
  image           String
  categories      CategoriesOnProducts[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  productsOnOrder ProductsOnOrder[]
}

model CategoriesOnProducts {
  productId         String
  productCategoryId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  product           Product         @relation(fields: [productId], references: [id])
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])

  @@id([productId, productCategoryId])
}

model CreditCard {
  id             String   @id @default(cuid())
  cardNumber     String
  cpf            String
  cvv            String
  expirationDate String
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@unique([cardNumber, userId])
}

model ProductsOnOrder {
  productId String
  orderId   String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])

  @@id([productId, orderId])
}

enum ORDER_STATUS {
  PENDING
  IN_PREPARATION
  ON_THE_WAY
  DELIVERED
  CANCELED
}

model Order {
  id              String            @id @default(cuid())
  status          ORDER_STATUS      @default(PENDING)
  totalPrice      Float
  paymentMethod   String
  userId          String
  addressId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  address         Address           @relation(fields: [addressId], references: [id])
  productsOnOrder ProductsOnOrder[]
  feedback        OrderFeedback?
}

model OrderFeedback {
  orderId         String   @id @unique
  comment         String
  stars           Int
  deliveryComment String
  deliveryStars   Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id])
}

model UserTypePasswords {
  userType  USER_TYPE @id @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
